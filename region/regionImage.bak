#include "pyramid.h"
#include "regionImage.h"
#include "utils.h"

list<BoundingRectangle*> whiteRegionImage(IplImage* inImage, list<BoundingRectangle*> inBlackRegions)
{
  int column, row;

  IplImage* tmpImage = cvCloneImage(inImage);
  int tmpImageWidth = tmpImage->width;
  int tmpImageHeight = tmpImage->height;

  list<BoundingRectangle*> boundingRectList; 
  BoundingRectangle* boundingRect;

  CvPoint point;

  printf("Finding White Regions ...\n");
  for( row=0; row<tmpImageHeight; row++ )
  {
    for(column=0; column<tmpImageWidth; column++)
    {
      point.x = column;
      point.y = row;
      if (isWhiteRegion(column, row, inImage, 1))
      {
        if (! isBoundByRectangle(point, inBlackRegions, 0))
        {
          if (! isBoundByRectangle(point, boundingRectList, 0))
          {
            boundingRect = findWhiteRegion(point, inImage, inBlackRegions);
            boundingRectList.push_back(boundingRect);
          }
        }
      }
    }
  }

  return boundingRectList;
}

BoundingRectangle* findWhiteRegion(CvPoint inPoint, IplImage* inImage, list<BoundingRectangle*> inBlackRegions)
{
  int inColumn = inPoint.x;
  int inRow = inPoint.y;

  BoundingRectangle* returnRect = new BoundingRectangle();

  IplImage* tmpImage = cvCloneImage(inImage);
  uchar* tmpImageData = (uchar *) tmpImage->imageData;
  int tmpImageWidth = tmpImage->width;
  int tmpImageHeight = tmpImage->height;

  CvPoint point;

  returnRect->top = tmpImageHeight;
  returnRect->left = tmpImageWidth;
  returnRect->bottom = 0;
  returnRect->right = 0;

  int column, row;

  for(column=inColumn; column<tmpImageWidth; column++)
  {
    for(row=inRow; row<tmpImageHeight; row++ )
    {
      point.x = column;
      point.y = row;
      if (isBoundByRectangle(point, inBlackRegions, 0))
        break;
       
      if (! isWhiteRegion(column, row, inImage, 1))
        break;

      if (row < returnRect->top) returnRect->top = row;
      if (row > returnRect->bottom) returnRect->bottom = row;
      if (column < returnRect->left) returnRect->left = column;
      if (column > returnRect->right) returnRect->right = column;
    }
    if (isBoundByRectangle(point, inBlackRegions, 0))
      break;
  }

  return returnRect;
}

list<BoundingRectangle*> blackRegionImage(IplImage* inImage)
{
  int column, row;

  IplImage* tmpImage = cvCloneImage(inImage);
  int tmpImageWidth = tmpImage->width;
  int tmpImageHeight = tmpImage->height;

  list<BoundingRectangle*> boundingRectList; 
  BoundingRectangle* boundingRect;

  CvPoint point;

  printf("Finding Black Regions ...\n");
  for( row=0; row<tmpImageHeight; row++ )
  {
    for(column=0; column<tmpImageWidth; column++)
    {
      point.x = column;
      point.y = row;
      if (isBlackRegion(column, row, inImage, 1))
      {
        if (! isBoundByRectangle(point, boundingRectList, 0))
        {
          boundingRect = findBlackRegion(point, inImage);
          boundingRectList.push_back(boundingRect);
        }
      }
    }
  }

  return boundingRectList;
}

BoundingRectangle* findBlackRegion(CvPoint inPoint, IplImage* inImage)
{
  int inColumn = inPoint.x;
  int inRow = inPoint.y;

  BoundingRectangle* returnRect = new BoundingRectangle();

  IplImage* tmpImage = cvCloneImage(inImage);
  uchar* tmpImageData = (uchar *) tmpImage->imageData;
  int tmpImageWidth = tmpImage->width;
  int tmpImageHeight = tmpImage->height;

  returnRect->top = tmpImageHeight;
  returnRect->left = tmpImageWidth;
  returnRect->bottom = 0;
  returnRect->right = 0;

  int column, row;

  for(column=inColumn; column<tmpImageWidth; column++)
  {
    for(row=inRow; row<tmpImageHeight; row++ )
    {
      if (! isBlackRegion(column, row, inImage, 1))
        break;

      if (row < returnRect->top) returnRect->top = row;
      if (row > returnRect->bottom) returnRect->bottom = row;
      if (column < returnRect->left) returnRect->left = column;
      if (column > returnRect->right) returnRect->right = column;

      if (! isBlackRow(row, returnRect->left, returnRect->right, inImage))
        break;
    }
    if (! isBlackColumn(column, returnRect->top, returnRect->bottom, inImage))
      break;
  }

  return returnRect;
}

